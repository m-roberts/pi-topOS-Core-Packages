#!/bin/bash
###############################################################
#                Unofficial 'Bash strict mode'                #
# http://redsymbol.net/articles/unofficial-bash-strict-mode/  #
###############################################################
set -euo pipefail
IFS=$'\n\t'
###############################################################


produce_hostname() {
    local RPI_SERIAL;
    local RPI_ID;
    RPI_SERIAL=$(grep -e "Serial" /proc/cpuinfo | awk '{print $3}')
    RPI_SERIAL="${RPI_SERIAL:-12345678}"
    RPI_ID=$(echo "${RPI_SERIAL: -4}" | tr '[:lower:]' '[:upper:]')
    echo "pi-top-${RPI_ID}"
}


set_hostname() {
    local NEW_HOSTNAME;
    NEW_HOSTNAME="$1"
    echo "Setting hostname to '${NEW_HOSTNAME}'"

    # update hostname
    hostname "${NEW_HOSTNAME}"
    echo "${NEW_HOSTNAME}" > /etc/hostname

    # update /etc/hosts
    sed -i '/^127.0.1.1/d' /etc/hosts
    echo -e "127.0.1.1\t${NEW_HOSTNAME} pi-top" | tee -a /etc/hosts
}


wait_for() {
    command="$1"
    until eval "${command}" &> /dev/null
    do
        sleep 1
    done
}

wait_for_avahi_daemon() {
    echo "Waiting for avahi-daemon daemon ..."
    wait_for "/usr/sbin/avahi-daemon -c"
}


wait_for_usb_interface() {
    echo "Waiting for USB interface to become active..."
    wait_for "ip a l ptusb0"
    echo "Waiting for USB to get an IP address ..."
    wait_for "[ ! -z $(ip a l ptusb0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p') ]"
}


do_publish() {
    wait_for_avahi_daemon
    wait_for_usb_interface

    local USB_IFACE_IP
    USB_IFACE_IP=$(ip a l ptusb0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')
    /usr/bin/avahi-publish -a -R pi-top.local "${USB_IFACE_IP}" &
}


do_set() {
    new_hostname=$(produce_hostname)
    if [ "${new_hostname}" != "$(hostname)" ]; then
        set_hostname "${new_hostname}"
    fi
}


main() {
    if [[ "$EUID" -ne 0 ]]; then
        echo "Please run as root"
        exit 1
    fi

    if [[ "${command}" == "set" ]]; then
        do_set
    elif [[ "${command}" == "publish" ]]; then
        do_publish
    fi
}


usage_and_exit() {
    echo "Application that sets up the pi-top hostname."
    echo ""
    echo -e "Usage:\\n\\t${0} {set,publish}"
    echo "where:"
    echo -e "\\tset\\t: set the machine hostname based on the Raspberry Pi serial number."
    echo -e "\\tpublish\\t: publish pi-top.local hostname using avahi."
    exit 1
}


command=${1:-}
valid_commands=("set" "publish")
if [[ -z "${command}" ]] || [[ ! "${valid_commands[*]}" =~ ${command} ]]; then
    # shellcheck disable=SC2145
    echo "Invalid argument: accepted values are: ${valid_commands[@]}."
    echo ""
    usage_and_exit
fi


main
